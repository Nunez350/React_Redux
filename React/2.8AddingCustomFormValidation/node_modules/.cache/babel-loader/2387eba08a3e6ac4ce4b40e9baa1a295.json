{"ast":null,"code":"import _objectSpread from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/src/containers/Blog/NewPost/NewPost.js\";\nimport React, { Component } from 'react';\nimport axios from '../../../axios';\nimport './NewPost.css';\nimport Input from '../../../components/Input/Input';\n\nvar NewPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPost, _Component);\n\n  function NewPost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      postForm: {\n        title: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Post Title'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        body: _defineProperty({\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Post Body',\n            rows: 6\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true,\n            minLength: 20\n          },\n          valid: false\n        }, \"touched\", false),\n        author: _defineProperty({\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'john',\n              displayValue: 'John'\n            }, {\n              value: 'max',\n              displayValue: 'Max'\n            }]\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true\n          },\n          valid: false\n        }, \"touched\", false)\n      }\n    };\n\n    _this.postDataHandler = function (event) {\n      event.preventDefault();\n      console.log(\"form submit\");\n      var postData = {};\n\n      for (var formElementIdentifier in _this.state.postForm) {\n        postData[formElementIdentifier] = _this.state.postForm[formElementIdentifier].value;\n      }\n\n      console.log(postData);\n      axios.post('/posts', postData).then(function (response) {\n        console.log(response);\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      console.log(event.target.value);\n\n      var updatedPostForm = _objectSpread({}, _this.state.postForm);\n\n      var updatedFormElement = _objectSpread({}, updatedPostForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedPostForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n\n      _this.setState({\n        postForm: updatedPostForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPost, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.postForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.postForm[key]\n        });\n      }\n\n      return React.createElement(\"form\", {\n        onSubmit: this.postDataHandler,\n        className: \"NewPost\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Add a Post\"), formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementtype: formElement.config.elementType,\n          elementconfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Add Post\"));\n    }\n  }]);\n\n  return NewPost;\n}(Component);\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/roynunez/Rohan/React/2.8AddingCustomFormValidation/src/containers/Blog/NewPost/NewPost.js"],"names":["React","Component","axios","Input","NewPost","state","postForm","title","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","body","rows","minLength","author","options","displayValue","postDataHandler","event","preventDefault","console","log","postData","formElementIdentifier","post","then","response","inputChangedHandler","inputIdentifier","target","updatedPostForm","updatedFormElement","checkValidity","setState","rules","isValid","trim","length","formElementsArray","key","push","id","config","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from '../../../axios';\nimport './NewPost.css';\nimport Input from '../../../components/Input/Input'\n\n\nclass NewPost extends Component {\n    state = {\n        postForm: {\n            title: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Post Title'\n                },\n                value: '',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            body: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Post Body',\n                    rows: 6\n                },\n                value: '',\n                touched: false,\n                validation:{\n                    required: true,\n                    minLength: 20\n                },\n                valid: false,\n                touched: false\n            },\n            author: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value:'john', displayValue:'John'},\n                        {value:'max', displayValue:'Max'}\n                    ]\n                },\n                value: '',\n                touched: false,\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched: false\n            }\n        }\n    }\n\n    postDataHandler = (event) => {\n        event.preventDefault();\n        console.log(\"form submit\");\n        const postData = {};\n        for(let formElementIdentifier in this.state.postForm){\n            postData[formElementIdentifier] = this.state.postForm[formElementIdentifier].value;\n\n        }\n        console.log(postData);\n        axios.post('/posts', postData)\n            .then((response) => {\n                console.log(response);\n            })\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        console.log(event.target.value);\n        const updatedPostForm = {\n            ...this.state.postForm\n        }\n        const updatedFormElement = {\n            ...updatedPostForm[inputIdentifier]\n        }\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedPostForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedFormElement);\n        this.setState({postForm: updatedPostForm});\n\n    }\n\n    checkValidity(value, rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== \"\" && isValid;  \n        }\n\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;  \n        }\n\n        return isValid;\n    }\n    render() {\n        let formElementsArray = [];\n        for(let key in this.state.postForm){\n            formElementsArray.push({\n                id:key,\n                config: this.state.postForm[key]\n            })\n        }\n        return (\n            <form onSubmit={this.postDataHandler} className=\"NewPost\">\n                <h1>Add a Post</h1>\n                {\n                    formElementsArray.map(formElement => (\n                        <Input \n                            key={formElement.id}\n                            elementtype={formElement.config.elementType}\n                            elementconfig={formElement.config.elementConfig}\n                            value={formElement.config.value}\n                            invalid={!formElement.config.valid}\n                            shouldValidate={formElement.config.validation}\n                            touched={formElement.config.touched}\n                            changed={(event) => this.inputChangedHandler(event,formElement.id )}/>\n                    ))\n                }\n                <button type='submit'>Add Post</button>\n            </form>\n        );\n    }\n}\n\nexport default NewPost;"]},"metadata":{},"sourceType":"module"}